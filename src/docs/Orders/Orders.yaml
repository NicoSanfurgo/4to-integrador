paths:
  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders from the database
      operationId: getAllOrders
      responses:
        "200":
          description: Orders fetched successfully from the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersResponse"
        "401":
          description: Unauthorized. Token expired
        "403":
          description: Forbidden. Invalid credentials
        "500":
          description: Internal Server Error

    post:
      tags:
        - Orders
      summary: Create order.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Order created successfully.
        "400":
          description: Request Failed.

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get a order by ID
      operationId: getOrderByID
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID.
          schema:
            type: string
      responses:
        200:
          description: Order found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        404:
          description: Order not found.

    put:
      tags:
        - Orders
      summary: Update a order by his ID
      operationId: updateOrdersById
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Order updated successfully
        "400":
          description: Request failed
        "404":
          description: Order not found

    delete:
      tags:
        - Orders
      summary: Delete a order by their ID
      operationId: deleteOrdersById
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        "200":
          description: Order successfully removed
        "400":
          description: Request failed
        "404":
          description: Order not found

  /api/orders/mockingorders/{total}:
    post:
      tags:
        - Orders
      summary: Create mock orders.
      operationId: createMockOrders
      parameters:
        - name: total
          in: path
          required: true
          description: Total number of orders
          schema:
            type: number
      responses:
        "201":
          description: Mock orders created successfully.
        "400":
          description: Request Failed.

components:
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Autogenerated Mongo DB ID
        business:
          type: object
          description: Business object
        user:
          type: object
          description: User object
        products:
          type: array
          description: Products array
      example:
        business: 643721855ec399851733c9f9
        user: 643733bc022d049a1802b271
        products: []

    OrdersResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Orders response status
        payload:
          type: array
          description: Orders array list
          items:
            $ref: "#/components/schemas/Order"
