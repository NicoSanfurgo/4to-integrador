paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users from the database
      operationId: getAllUsers
      responses:
        "200":
          description: Users fetched successfully from the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "401":
          description: Unauthorized. Token expired
        "403":
          description: Forbidden. Invalid credentials
        "500":
          description: Internal Server Error

    post:
      tags:
        - Users
      summary: Create User.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully.
        "400":
          description: Request Failed.

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      operationId: getUserByID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID.
          schema:
            type: string
      responses:
        200:
          description: User found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found.

    put:
      tags:
        - Users
      summary: Update a user by his ID
      operationId: updateUsersById
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Request failed
        "404":
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete a user by their ID
      operationId: deleteUsersById
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        "200":
          description: User successfully removed
        "400":
          description: Request failed
        "404":
          description: User not found

  /api/users/mockingusers/{total}:
    post:
      tags:
        - Users
      summary: Create mock users.
      operationId: createMockUsers
      parameters:
        - name: total
          in: path
          required: true
          description: Total number of users
          schema:
            type: number
      responses:
        "201":
          description: Mock users created successfully.
        "400":
          description: Request Failed.

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Autogenerated Mongo DB ID
        first_name:
          type: string
          description: User first name
        last_name:
          type: string
          description: User last name
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
        github_username:
          type: string
          description: User github username
        role:
          type: string
          description: User role
        orders:
          type: array
          description: Array of user orders
      example:
        first_name: Angel
        last_name: Lautaro
        email: angelauta2000@gmail.com
        password: 123abc
        github_username: Chopa2
        role: USER
        orders: []

    UsersResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Users response status
        payload:
          type: array
          description: Users array list
          items:
            $ref: "#/components/schemas/User"
