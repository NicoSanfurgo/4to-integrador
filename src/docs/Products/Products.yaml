paths:
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products from the database
      operationId: getAllProducts
      responses:
        "200":
          description: Products fetched successfully from the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsResponse"
        "401":
          description: Unauthorized. Token expired
        "403":
          description: Forbidden. Invalid credentials
        "500":
          description: Internal Server Error

    post:
      tags:
        - Products
      summary: Create Product.
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product created successfully.
        "400":
          description: Request Failed.

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      operationId: getProductByID
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID.
          schema:
            type: string
      responses:
        200:
          description: Product found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Product not found.

    put:
      tags:
        - Products
      summary: Update a product by his ID
      operationId: updateProductsById
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated successfully
        "400":
          description: Request failed
        "404":
          description: Product not found

    delete:
      tags:
        - Products
      summary: Delete a product by their ID
      operationId: deleteProductsById
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        "200":
          description: Product successfully removed
        "400":
          description: Request failed
        "404":
          description: Product not found

  /api/products/mockingproducts/{total}:
    post:
      tags:
        - Products
      summary: Create mock products.
      operationId: createMockProducts
      parameters:
        - name: total
          in: path
          required: true
          description: Total number of products
          schema:
            type: number
      responses:
        "201":
          description: Mock products created successfully.
        "400":
          description: Request Failed.

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Autogenerated Mongo DB ID
        title:
          type: string
          description: Product name
        price:
          type: number
          description: Product price
        stock:
          type: number
          description: Product quantity
        thumbnail_url:
          type: string
          description: Product image
      example:
        title: Pingas Finals
        price: 300
        stock: 380
        thumbnail_url: pingas.png

    ProductsResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Products response status
        payload:
          type: array
          description: Products array list
          items:
            $ref: "#/components/schemas/Product"
